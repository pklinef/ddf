#!/usr/bin/env bash

# Capture start|stop command
COMMAND=$1
shift

# -----------------------------------------------------------------------------
usage() {
    echo "Usage: $0 {start|stop} " >&2; exit 1;
}

# -----------------------------------------------------------------------------
if [ -z  "$COMMAND" ]; then
    echo "Missing command" >&2
    usage
fi

if  ! ( [ "$COMMAND" == "start" ] || [ "$COMMAND" == "stop" ] ); then
    echo "Unknown command: $COMMAND" >&2
    usage
fi

lowercase() {
 echo "$1" | tr '[:upper:]' '[:lower:]'
}

SCRIPTDIR=$(dirname $0)
HOME_DIR=$(cd "${SCRIPTDIR}/.."; pwd -P)
GET=${SCRIPTDIR}/get_property
SOLR_EXEC=${HOME_DIR}/solr/bin/solr
STOPKEY_FILE=${SCRIPTDIR}/SOLR_STOPKEY

# Read port from custom.system.properties file
SOLR_PORT=$($GET "solr.http.port")
SOLR_MEM=$($GET "solr.mem")

# Do not proceed if required properties are missing
if [ -z "$SOLR_PORT" ]; then
    echo "Cannot determine Solr port from custom.system.properties file. Exiting."
    exit 2
fi

# Set special environment variables used by Solr to configure TLS
set_security_properties() {
      # Use the same key and trust stores as DDF
      export SOLR_SSL_KEY_STORE=$HOME_DIR/$($GET javax.net.ssl.keyStore)
      export SOLR_SSL_KEY_STORE_PASSWORD=$($GET javax.net.ssl.keyStorePassword)
      export SOLR_SSL_KEY_STORE_TYPE=$($GET javax.net.ssl.keyStoreType)
      export SOLR_SSL_TRUST_STORE=$HOME_DIR/$($GET javax.net.ssl.trustStore)
      export SOLR_SSL_TRUST_STORE_PASSWORD=$($GET javax.net.ssl.trustStorePassword)
      export SOLR_SSL_TRUST_STORE_TYPE=$($GET javax.net.ssl.trustStoreType)
}

generate_stopkey() {
    # Generate a random string of 8 lowercase letters and digits.
    # NOTE: Mac OS interprets bytes as belonging to the UTF-8 character set.
    # The urandom stream does not spit out valid UTF-8 characters.
    # Tell Mac OS to not interpret the bytes as charcters with LC_ALL=C
    export STOP_KEY=`cat /dev/urandom | env LC_CTYPE=C tr -dc a-z0-9 | head -c 8`
    echo $STOP_KEY >& ${STOPKEY_FILE}
}


start_solr() {
    if [ "$SOLR_UNSECURE" != "true" ]; then
        set_security_properties
    fi
    generate_stopkey
    $SOLR_EXEC $1 -force -p $SOLR_PORT -m $SOLR_MEM
    local rc=$?
    print_messages $rc
    return $rc
}

stop_solr() {

	if [ -f "${STOPKEY_FILE}" ]; then
	    export STOP_KEY=`cat ${STOPKEY_FILE}`;
	    rm ${STOPKEY_FILE};
	fi
    $SOLR_EXEC stop -p $SOLR_PORT;

}

print_messages() {
    if [ $1 -eq 0 ]; then
        if [ "$SOLR_UNSECURE" != "true" ]; then
            echo "Using Solr secure configuration" >&2
        else
            echo "**** USING UNSECURED SOLR CONFIGURATION ****" >&2
        fi
    fi
}

if [ "$COMMAND" == "stop" ]; then
	stop_solr
else
    # Read protocol from properties file
    SOLR_PROTOCOL=$($GET "solr.http.protocol")

    # Do not proceed if required properties are missing
    if [ -z "$SOLR_PROTOCOL" ]; then
        echo "Cannot determine Solr protocol (http or https) from custom.system.properties file. Exiting."
        exit 3
    fi

    # Normalize
    SOLR_PROTOCOL=$(lowercase $SOLR_PROTOCOL)

    # Verify
    if  ( [ "$SOLR_PROTOCOL" != "https" ] && [ "$SOLR_PROTOCOL" != "http" ] ); then
        echo "Unkown Solr protocol \"$SOLR_PROTOCOL\" found in custom.system.properties file"
        echo "Expected \"http\" or \"https\". Exiting";
        exit 4
    fi

    # Determine desired security configuration
    if [ "$SOLR_PROTOCOL" = "http" ]; then
        SOLR_UNSECURE="true"
    fi

    start_solr $COMMAND
fi